{% set name = "openvino" %}
{% set version = "2023.1.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/openvinotoolkit/{{ name }}/archive/e5abe855b7567b08cadc916b58ad01024484f97f.tar.gz
    sha256: 16269611ddd420b451f2ef949e676e3eb2f73d1a0d7977fa1d5e8b3a720c33c5
    patches:
    - patches/005-setup-py.patch
  - url: https://github.com/opencv/ade/archive/58b2595a1a95cc807be8bf6222f266a9a1f393a9.tar.gz
    sha256: db7759cc32107e713b9e503ddf71a54ba2c80de07daefcb1aa315507e706ce07
    folder: thirdparty/ade

build:
  number: 1
  run_exports:
    - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-python', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-auto-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-hetero-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-auto-batch-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-ir-frontend', max_pin='x.x.x') }}
  ignore_run_exports_from:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - tbb-devel # libopenvino and libopenvino-*-plugin already depend on tbb
    - pugixml # libopenvino already depends on pugixml

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - git
    - ninja
    - pkg-config # to generate openvino.pc on macOS
    - scons  # [aarch64 or arm64]
    - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
    - python >=3.7
    - flatbuffers =23.3.3
    - sysroot_linux-64 =2.17  # [linux64]
  host:
    - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
    - pugixml >=1.12.1 # starting from this version shared libraries are provided
    - xbyak >=6.69.1  # [x86_64]
  run:
    - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-python', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-auto-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-hetero-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-auto-batch-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-ir-frontend', max_pin='x.x.x') }}

test:
  requires:
    - {{ compiler('cxx') }}
    - {{ compiler('c') }}
    - ninja
    - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
    - pkg-config # to find zlib
    - zlib
    - nlohmann_json
    - sysroot_linux-64 =2.17  # [linux64]
    - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
    - opencv
    - gflags
  source_files:
    - samples
    - thirdparty/cnpy
  files:
    - snippets/
  commands:
    - export MACOSX_DEPLOYMENT_TARGET={{ MACOSX_DEPLOYMENT_TARGET }}  # [osx]
    - export CMAKE_GENERATOR=Ninja  # [unix]

    # check libraries (symlinks)
    {% set openvino_libs = [] %}
    {{ openvino_libs.append("") or "" }}
    {{ openvino_libs.append("_c") or "" }}
    {{ openvino_libs.append("_paddle_frontend") or "" }}
    {{ openvino_libs.append("_pytorch_frontend") or "" }}
    {{ openvino_libs.append("_onnx_frontend") or "" }}
    {{ openvino_libs.append("_tensorflow_frontend") or "" }}
    {{ openvino_libs.append("_tensorflow_lite_frontend") or "" }}
    {% for openvino_lib in openvino_libs %}
    - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}${SHLIB_EXT}  # [unix]
    - if not exist %LIBRARY_BIN%\\openvino{{ openvino_lib }}%SHLIB_EXT% exit 1  # [win]
    {% endfor %}

    # C++ samples on Unix
    - mkdir -p samples/cpp/thirdparty  # [unix]
    - cp -R thirdparty/cnpy samples/cpp/thirdparty/cnpy  # [unix]
    - cmake -S samples/cpp -B samples_cpp_build -DBIN_FOLDER=bin  # [unix]
    - cmake --build samples_cpp_build --config Release --verbose  # [unix]
    - ./samples_cpp_build/bin/hello_query_device  # [unix]

    # C samples on Unix
    - cp samples/cpp/CMakeLists.txt samples/c/CMakeLists.txt  # [unix]
    - cmake -S samples/c -B samples_c_build -DBIN_FOLDER=bin  # [unix]
    - cmake --build samples_c_build --config Release --verbose  # [unix]

    # C++ samples on Windows
    - mkdir -p samples\\cpp\\thirdparty  # [win]
    - cp -R thirdparty\\cnpy samples\\cpp\\thirdparty\\cnpy  # [win]
    - cmake -S samples\\cpp -B samples_cpp_build -DBIN_FOLDER=bin  # [win]
    - cmake --build samples_cpp_build --config Release --verbose  # [win]
    - .\\samples_cpp_build\\bin\\Release\\hello_query_device.exe  # [win]

    # C samples on Windows
    - cp samples\\cpp\\CMakeLists.txt samples\\c\\CMakeLists.txt  # [win]
    - cmake -S samples\\c -B samples_c_build -DBIN_FOLDER=bin  # [win]
    - cmake --build samples_c_build --config Release --verbose  # [win]


outputs:
  - name: libopenvino
    version: {{ version }}
    script: install/install.sh
    about:
      summary: OpenVINO Core Runtime library
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - pugixml >=1.12.1 # starting from this version shared libraries are provided
        - tbb-devel =2021.5  # starting from this version TBB uses hwloc in conda
    test:
      commands:
        {% set openvino_libs = [] %}
        {{ openvino_libs.append("") or "" }}
        {{ openvino_libs.append("_c") or "" }}
        {% for openvino_lib in openvino_libs %}
        - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}${SHLIB_EXT}.{{ version }}  # [linux]
        - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}.{{ version }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino{{ openvino_lib }}%SHLIB_EXT% exit 1  # [win]
        {% endfor %}


  - name: libopenvino-python
    version: {{ version }}
    script: install/install_python.sh
    about:
      summary: OpenVINO Python API
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
      entry_points:
        - ovc = openvino.tools.ovc.main:main # do we need it? looks like setup.py does it
        # - benchmark_app = openvino.tools.benchmark.main:main
      run_exports:
        - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
      ignore_run_exports_from:
        - tbb-devel  # because required just for OpenVINODeveloperPackage
        - pugixml  # because required just for OpenVINODeveloperPackage
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - make  # [unix]
        - python                              # [build_platform != target_platform]
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - cython >=0.29
        - cmake >=3.15  # to have new cmake cmd interface (-S, --install and other options)
        - pybind11 >=2.10.1  # this versions works well for cross-compilation
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - setuptools >=65.6.1
        - cython >=0.29
        - tbb-devel =2021.5  # for OpenVINODeveloperPackage only
        - pugixml >=1.12.1  # for OpenVINODeveloperPackage only
        - python
        - pip
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - python
        - numpy >=1.16.6
    test:
      imports:
        - ngraph
        - ngraph.opset1
        - ngraph.opset2
        - ngraph.opset3
        - ngraph.opset4
        - ngraph.opset5
        - ngraph.opset6
        - ngraph.opset7
        - ngraph.opset8
        - ngraph.opset9
        - ngraph.opset10
        - ngraph.opset11
        - ngraph.utils
        - openvino.inference_engine
        - openvino.runtime
        - openvino.runtime.op
        - openvino.runtime.passes
        - openvino.runtime.properties
        - openvino.runtime.opset1
        - openvino.runtime.opset2
        - openvino.runtime.opset3
        - openvino.runtime.opset4
        - openvino.runtime.opset5
        - openvino.runtime.opset6
        - openvino.runtime.opset7
        - openvino.runtime.opset8
        - openvino.runtime.opset9
        - openvino.runtime.opset10
        - openvino.runtime.opset11
        - openvino.frontend
        # - openvino.frontend.onnx
        # - openvino.frontend.paddle
        # - openvino.frontend.pytorch
        # - openvino.frontend.tensorflow
        - openvino.preprocess
      commands:
        # - pip check # fails before of openvino-telemetry
        - ovc --help
        # - benchmark_app --help
        - test $(pip list | grep openvino | wc -l) -eq 1  # [unix]
        - if [[ $($PYTHON -c 'import openvino.runtime as ov; print(ov.__version__[0:8])') != $PKG_VERSION ]]; then exit 1; fi  # [unix]
      requires:
        - pip

  - name: libopenvino-ir-frontend
    version: {{ version }}
    script: install/install_ir.sh
    about:
      summary: OpenVINO IR Frontend
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - pugixml >=1.12.1 # starting from this version shared libraries are provided
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/libopenvino_ir_frontend${SHLIB_EXT}.{{ version }}  # [linux]
        - test -f $PREFIX/lib/libopenvino_ir_frontend.{{ version }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino_ir_frontend%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-auto-plugin
    version: {{ version }}
    script: install/install_auto.sh
    about:
      summary: OpenVINO Auto plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-auto-plugin', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version }}/libopenvino_auto_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version }}\\openvino_auto_plugin%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-auto-batch-plugin
    version: {{ version }}
    script: install/install_batch.sh
    about:
      summary: OpenVINO Auto Batch plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-auto-batch-plugin', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version }}/libopenvino_auto_batch_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version }}\\openvino_auto_batch_plugin%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-hetero-plugin
    version: {{ version }}
    script: install/install_hetero.sh
    about:
      summary: OpenVINO Hetero plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-hetero-plugin', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - pugixml >=1.12.1 # starting from this version shared libraries are provided
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version }}/libopenvino_hetero_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version }}\\openvino_hetero_plugin%SHLIB_EXT% exit 1  # [win]

  - name: openvino
    script: install/install_dev.sh

about:
  home: https://github.com/openvinotoolkit/openvino
  summary: 'Intel® Distribution of OpenVINO™ Toolkit'
  description: |
    Intel® Distribution of OpenVINO™ toolkit is an open-source toolkit for
    optimizing and deploying AI inference. It can be used to develop
    applications and solutions based on deep learning tasks, such as:
    emulation of human vision, automatic speech recognition, natural
    language processing, recommendation systems, etc. It provides
    high-performance and rich deployment options, from edge to cloud
  license: Apache-2.0
  license_family: Apache
  license_file:
    - LICENSE
    - third-party-programs.txt
    - onednn_third-party-programs.txt
    - runtime-third-party-programs.txt
  doc_url: https://docs.openvino.ai/latest/index.html
  dev_url: https://github.com/openvinotoolkit/openvino

extra:
  recipe-maintainers:
    - ilya-lavrenov
    - artanokhov
    - evgenytalanin-intel
    - RaguzovaTatyana
