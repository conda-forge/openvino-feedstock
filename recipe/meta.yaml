{% set name = "openvino" %}
{% set version = "2022.3.1" %}
{% set commit_number = "9236" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/openvinotoolkit/openvino/archive/refs/tags/{{ version }}.tar.gz
    sha256: 79ed23521e20513a2e587f8226d95375146546f33fc7a842228f37752bacc412
    folder: openvino_sources
    patches:
    - patches/001-gflags.patch
    - patches/002-find-hwloc.patch
    - patches/003-find-opencl.patch
    - patches/004-apple-cross-compile.patch
  - url: https://github.com/openvinotoolkit/openvino_contrib/archive/13025cfb0a98a5eb0ed531ea922dcb567b879902.tar.gz  # [aarch64 or arm64]
    sha256: a6bd13848443a2e8f15ea8c24fb049935753157d233913a2174e5cf080c98c90  # [aarch64 or arm64]
    folder: openvino_contrib  # [aarch64 or arm64]
  - url: https://github.com/ARM-software/ComputeLibrary/archive/1b3192e8a23513031163dc14d248f47671986121.tar.gz  # [aarch64 or arm64]
    sha256: 7244013364f4f52341cdaed0d7995e6cd93def542388b9b0b5662e0799fc93de  # [aarch64 or arm64]
    folder: openvino_contrib/modules/arm_plugin/thirdparty/ComputeLibrary  # [aarch64 or arm64]
  - url: https://github.com/herumi/xbyak/archive/f8ea5c28dfcdc98585881d0ca9e499580ca077ae.tar.gz
    sha256: 394e6381f943387c481e9aabe2cdafd6cf422d35499ed042c6fcb85523d00f2f
    folder: openvino_sources/thirdparty/xbyak
  - url: https://github.com/openvinotoolkit/oneDNN/archive/44de3c3698b687c26e487fc8f0213fa487e8fe2c.tar.gz  # [x86_64]
    sha256: 2c6aa7d787a947aa032224683f216ab38c168de4aed61d0554671774060a3615  # [x86_64]
    folder: openvino_sources/src/plugins/intel_cpu/thirdparty/onednn  # [x86_64]
  - url: https://github.com/opencv/ade/archive/58b2595a1a95cc807be8bf6222f266a9a1f393a9.tar.gz
    sha256: db7759cc32107e713b9e503ddf71a54ba2c80de07daefcb1aa315507e706ce07
    folder: openvino_sources/thirdparty/ade
  - url: https://github.com/onnx/onnx/archive/refs/tags/v1.12.0.tar.gz
    sha256: 052ad3d5dad358a33606e0fc89483f8150bb0655c99b12a43aa58b5b7f0cc507
    folder: openvino_sources/thirdparty/onnx/onnx
  - url: https://github.com/oneapi-src/oneDNN/archive/fbec3e25a559ee252022ae066817b204e106a6ba.tar.gz
    sha256: 414747494018d41b115593e0ea7f952cdff62418f94ca32d89300e435293addd
    folder: openvino_sources/src/plugins/intel_gpu/thirdparty/onednn_gpu

build:
  number: 1
  script_env:
    - CI_BUILD_NUMBER={{ commit_number }}
  run_exports:
    - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-intel-cpu-plugin', max_pin='x.x.x') }}  # [x86_64]
    - {{ pin_subpackage('libopenvino-arm-cpu-plugin', max_pin='x.x.x') }}  # [aarch64 or arm64]
    - {{ pin_subpackage('libopenvino-intel-gpu-plugin', max_pin='x.x.x') }}  # [win64 or linux64]
    - {{ pin_subpackage('libopenvino-auto-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-hetero-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-auto-batch-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-ir-frontend', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-onnx-frontend', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-paddle-frontend', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-tensorflow-frontend', max_pin='x.x.x') }}
  ignore_run_exports_from:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - pugixml # libopenvino and others already depends on pugixml
    - tbb-devel # libopenvino and libopenvino already depend on tbb

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - git
    - cmake >=3.15
    - ninja
    - gflags
    - python >=3.7
    - pkg-config
    - scons  # [aarch64 or arm64]
    - libprotobuf =3.20.3
    - sysroot_linux-64 =2.17  # [linux64]
  host:
    - tbb-devel =2021.5
    - ocl-icd  # [linux64]
    - clhpp  # [linux64 or win64]
    - khronos-opencl-icd-loader  # [win64]
    - pugixml >=1.12.1
    - libprotobuf-static =3.20.3  # [not win64]
    - libprotobuf-static  # [win64]
  run:
    - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-intel-cpu-plugin', max_pin='x.x.x') }}  # [x86_64]
    - {{ pin_subpackage('libopenvino-arm-cpu-plugin', max_pin='x.x.x') }}  # [aarch64 or arm64]
    - {{ pin_subpackage('libopenvino-intel-gpu-plugin', max_pin='x.x.x') }}  # [win64 or linux64]
    - {{ pin_subpackage('libopenvino-auto-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-hetero-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-auto-batch-plugin', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-ir-frontend', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-onnx-frontend', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-paddle-frontend', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-tensorflow-frontend', max_pin='x.x.x') }}

test:
  requires:
    - {{ compiler('cxx') }}
    - {{ compiler('c') }}
    - ninja
    - cmake >=3.15
    - pkg-config # to find zlib
    - zlib
    - nlohmann_json
    - sysroot_linux-64 =2.17  # [linux64]
    - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
    - opencv
    - gflags
  source_files:
    - openvino_sources/samples
    - openvino_sources/thirdparty/cnpy
  files:
    - snippets/
  commands:
    - export MACOSX_DEPLOYMENT_TARGET={{ MACOSX_DEPLOYMENT_TARGET }}  # [osx]
    - export CMAKE_GENERATOR=Ninja  # [unix]

    # check libraries (symlinks)
    {% set openvino_libs = [] %}
    {{ openvino_libs.append("") or "" }}
    {{ openvino_libs.append("_c") or "" }}
    {{ openvino_libs.append("_paddle_frontend") or "" }}
    {{ openvino_libs.append("_onnx_frontend") or "" }}
    {{ openvino_libs.append("_tensorflow_frontend") or "" }}
    {% for openvino_lib in openvino_libs %}
    - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}${SHLIB_EXT}  # [unix]
    - if not exist %LIBRARY_BIN%\\openvino{{ openvino_lib }}%SHLIB_EXT% exit 1  # [win]
    {% endfor %}

    # C++ samples on Unix
    - mkdir -p openvino_sources/samples/cpp/thirdparty  # [unix]
    - cp -R openvino_sources/thirdparty/cnpy openvino_sources/samples/cpp/thirdparty/cnpy  # [unix]
    - cmake -S openvino_sources/samples/cpp -B samples_cpp_build -DBIN_FOLDER=bin  # [unix]
    - cmake --build samples_cpp_build --config Release --verbose  # [unix]
    - ./samples_cpp_build/bin/hello_query_device  # [unix]

    # C samples on Unix
    - cp openvino_sources/samples/cpp/CMakeLists.txt openvino_sources/samples/c/CMakeLists.txt  # [unix]
    - cmake -S openvino_sources/samples/c -B samples_c_build -DBIN_FOLDER=bin  # [unix]
    - cmake --build samples_c_build --config Release --verbose  # [unix]

    # C++ samples on Windows
    - mkdir -p openvino_sources\\samples\\cpp\\thirdparty  # [win]
    - cp -R openvino_sources\\thirdparty\\cnpy openvino_sources\\samples\\cpp\\thirdparty\\cnpy  # [win]
    - cmake -S openvino_sources\\samples\\cpp -B samples_cpp_build -DBIN_FOLDER=bin  # [win]
    - cmake --build samples_cpp_build --config Release --verbose  # [win]
    - .\\samples_cpp_build\\bin\\Release\\hello_query_device.exe  # [win]

    # C samples on Windows
    - cp openvino_sources\\samples\\cpp\\CMakeLists.txt openvino_sources\\samples\\c\\CMakeLists.txt  # [win]
    - cmake -S openvino_sources\\samples\\c -B samples_c_build -DBIN_FOLDER=bin  # [win]
    - cmake --build samples_c_build --config Release --verbose  # [win]

    # check that devices are found using OpenVINO C API
    - $CC snippets/openvino_available_devices.c $(pkg-config --cflags --libs pugixml tbb openvino) -Wl,-rpath,$PREFIX/lib -o openvino_devices_test  # [unix]
    - if [[ $(./openvino_devices_test) != "passed" ]]; then exit 1 ; fi  # [unix]

    # check that frontends are found using OpenVINO C++ API
    - cmake -S snippets -B snippets_build
    - cmake --build snippets_build --config Release --verbose
    - if [[ $(./snippets_build/openvino_frontends_test) != 4 ]]; then exit 1 ; fi  # [unix]


outputs:
  - name: libopenvino
    version: {{ version }}
    script: install/install.sh
    about:
      summary: OpenVINO Core Runtime library
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15
      host:
        - pugixml >=1.12.1
        - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
    test:
      commands:
        {% set openvino_libs = [] %}
        {{ openvino_libs.append("") or "" }}
        {{ openvino_libs.append("_c") or "" }}
        {% for openvino_lib in openvino_libs %}
        - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}${SHLIB_EXT}.{{ version }}  # [linux]
        - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}.{{ version }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino{{ openvino_lib }}%SHLIB_EXT% exit 1  # [win]
        {% endfor %}

  - name: libopenvino-ir-frontend
    version: {{ version }}
    script: install/install_ir.sh
    about:
      summary: OpenVINO IR Frontend
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-ir-frontend', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - pugixml >=1.12.1
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/libopenvino_ir_frontend${SHLIB_EXT}.{{ version }}  # [linux]
        - test -f $PREFIX/lib/libopenvino_ir_frontend.{{ version }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino_ir_frontend%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-onnx-frontend
    version: {{ version }}
    script: install/install_onnx.sh
    about:
      summary: OpenVINO ONNX Frontend
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-onnx-frontend', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/libopenvino_onnx_frontend${SHLIB_EXT}.{{ version }}  # [linux]
        - test -f $PREFIX/lib/libopenvino_onnx_frontend.{{ version }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino_onnx_frontend%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-paddle-frontend
    version: {{ version }}
    script: install/install_paddle.sh
    about:
      summary: OpenVINO Paddle Frontend
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-paddle-frontend', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/libopenvino_paddle_frontend${SHLIB_EXT}.{{ version }}  # [linux]
        - test -f $PREFIX/lib/libopenvino_paddle_frontend.{{ version }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino_paddle_frontend%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-tensorflow-frontend
    version: {{ version }}
    script: install/install_tensorflow.sh
    about:
      summary: OpenVINO TensorFlow Frontend
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-tensorflow-frontend', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/libopenvino_tensorflow_frontend${SHLIB_EXT}.{{ version }}  # [linux]
        - test -f $PREFIX/lib/libopenvino_tensorflow_frontend.{{ version }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino_tensorflow_frontend%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-intel-cpu-plugin
    version: {{ version }}
    script: install/install_cpu.sh
    about:
      summary: OpenVINO Intel® CPU plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      skip: True  # [not x86_64]
      run_exports:
        - {{ pin_subpackage('libopenvino-intel-cpu-plugin', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15
      host:
        - pugixml >=1.12.1
        - tbb-devel =2021.5
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version }}/libopenvino_intel_cpu_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version }}\\openvino_intel_cpu_plugin%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-arm-cpu-plugin
    version: {{ version }}
    script: install/install_cpu.sh
    about:
      summary: OpenVINO ARM CPU plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      skip: True  # [not aarch64 and not arm64]
      run_exports:
        - {{ pin_subpackage('libopenvino-arm-cpu-plugin', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15
      host:
        - tbb-devel =2021.5
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version }}/libopenvino_arm_cpu_plugin.so  # [unix]

  - name: libopenvino-intel-gpu-plugin
    version: {{ version }}
    script: install/install_gpu.sh
    about:
      summary: OpenVINO Intel® GPU plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      skip: True  # [not linux64 and not win64]
      run_exports:
        - {{ pin_subpackage('libopenvino-intel-gpu-plugin', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
        - ocl-icd  # [linux64]
        - clhpp
        - khronos-opencl-icd-loader  # [win64]
        - pugixml >=1.12.1
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - ocl-icd-system  # [linux64]
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version }}/libopenvino_intel_gpu_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version }}\\openvino_intel_gpu_plugin%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-auto-plugin
    version: {{ version }}
    script: install/install_auto.sh
    about:
      summary: OpenVINO Auto plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-auto-plugin', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15
      host:
        - tbb-devel =2021.5
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version }}/libopenvino_auto_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version }}\\openvino_auto_plugin%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-auto-batch-plugin
    version: {{ version }}
    script: install/install_batch.sh
    about:
      summary: OpenVINO Auto Batch plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-auto-batch-plugin', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version }}/libopenvino_auto_batch_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version }}\\openvino_auto_batch_plugin%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-hetero-plugin
    version: {{ version }}
    script: install/install_hetero.sh
    about:
      summary: OpenVINO Hetero plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-hetero-plugin', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - pugixml >=1.12.1
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version }}/libopenvino_hetero_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version }}\\openvino_hetero_plugin%SHLIB_EXT% exit 1  # [win]

  - name: openvino
    script: install/install_dev.sh

about:
  home: https://github.com/openvinotoolkit/openvino
  summary: 'Intel® Distribution of OpenVINO™ Toolkit'
  description: |
    Intel® Distribution of OpenVINO™ toolkit is an open-source toolkit for
    optimizing and deploying AI inference. It can be used to develop
    applications and solutions based on deep learning tasks, such as:
    emulation of human vision, automatic speech recognition, natural
    language processing, recommendation systems, etc. It provides
    high-performance and rich deployment options, from edge to cloud.

    Installing OpenVINO Runtime from Conda Forge is recommended for C / C++ developers,
    as it provides only the C / C++ Runtime API.
    If you work with Python or aim at GPU inference, consider other OpenVINO distribution channels:
    https://www.intel.com/content/www/us/en/developer/tools/openvino-toolkit/download.html
  license: Apache-2.0
  license_family: Apache
  license_file:
    - LICENSE
    - third-party-programs.txt
    - onednn_third-party-programs.txt
    - runtime-third-party-programs.txt
  doc_url: https://docs.openvino.ai/latest/index.html
  dev_url: https://github.com/openvinotoolkit/openvino

extra:
  recipe-maintainers:
    - ilya-lavrenov
    - artanokhov
