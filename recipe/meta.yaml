{% set name = "openvino" %}
{% set version_postfix = "2023.1.0" %}
{% set version = "2023.1.0.dev20230623" %}

package:
  name: {{ name|lower }}-split
  version: {{ version }}

source:
  - url: https://github.com/openvinotoolkit/openvino/archive/04cb55c37dbb673bd940afd176f5dcb541fe3779.tar.gz
    sha256: 09d7258aa9f0f842c18207c3350fce0aad5e1cb4b0b68be005578f7ce5f591f4
    patches:
    - patches/001-onnx-frontend-build.patch
    - patches/003-lin-arm64-compute-lib.patch  # [aarch64]
  - url: https://github.com/ARM-software/ComputeLibrary/archive/refs/tags/v23.02.1.tar.gz  # [aarch64 or arm64]
    sha256: c3a443e26539f866969242e690cf0651ef629149741ee18732f954c734da6763  # [aarch64 or arm64]
    folder: src/plugins/intel_cpu/thirdparty/ComputeLibrary  # [aarch64 or arm64]
  - url: https://github.com/openvinotoolkit/oneDNN/archive/33bb2b261d3829162395aaa9bbe8c1c5b139e855.tar.gz
    sha256: db35a92f036d4f493931cf19abb57b6ec1e3eeafd8deb09a3294c5da6a63a50c
    folder: src/plugins/intel_cpu/thirdparty/onednn
  - url: https://github.com/oneapi-src/oneDNN/archive/ec0b2ee85fc2a2dbdeec10035c5ef5813d8fb5ea.tar.gz  # [win64 or linux64]
    sha256: 8d84c7567803bf30e3a8fec9bf14e33b2003f73545160ddd1cf0406c4c7fb3d5  # [win64 or linux64]
    folder: src/plugins/intel_gpu/thirdparty/onednn_gpu  # [win64 or linux64]
  - url: https://github.com/opencv/ade/archive/58b2595a1a95cc807be8bf6222f266a9a1f393a9.tar.gz
    sha256: db7759cc32107e713b9e503ddf71a54ba2c80de07daefcb1aa315507e706ce07
    folder: thirdparty/ade
  - url: https://github.com/onnx/onnx/archive/refs/tags/v1.13.1.tar.gz
    sha256: 090d3e10ec662a98a2a72f1bf053f793efc645824f0d4b779e0ce47468a0890e
    folder: thirdparty/onnx/onnx

build:
  number: 2

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - ninja
    - pkg-config # to generate openvino.pc on macOS
    - scons  # [aarch64 or arm64]
    - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
    - python >=3.7
    - libprotobuf =3.20.3 # for protoc compiler, libraries are used from libprotobuf-static
    - flatbuffers =23.3.3
    - sysroot_linux-64 =2.17  # [linux64]
  host:
    - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
    - snappy
    - ocl-icd  # [linux64]
    - clhpp  # [linux64 or win64]
    - khronos-opencl-icd-loader  # [win64]
    - pugixml >=1.12.1 # starting from this version shared libraries are provided
    - xbyak >=6.69.1  # [x86_64]
    - libprotobuf-static =3.20.3  # [not win64]
    - libprotobuf-static  # [win64]

outputs:
  - name: libopenvino
    version: {{ version }}
    script: install/install.sh
    about:
      summary: OpenVINO Core Runtime library
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - pugixml >=1.12.1 # starting from this version shared libraries are provided
        - tbb-devel =2021.5  # starting from this version TBB uses hwloc in conda
    test:
      commands:
        {% set openvino_libs = [] %}
        {{ openvino_libs.append("") or "" }}
        {{ openvino_libs.append("_c") or "" }}
        {% for openvino_lib in openvino_libs %}
        - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}${SHLIB_EXT}.{{ version_postfix }}  # [linux]
        - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}.{{ version_postfix }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino{{ openvino_lib }}%SHLIB_EXT% exit 1  # [win]
        {% endfor %}
        - test -f $PREFIX/lib/openvino-{{ version_postfix }}/libopenvino_gapi_preproc.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version_postfix }}\\openvino_gapi_preproc%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-ir-frontend
    version: {{ version }}
    script: install/install_ir.sh
    about:
      summary: OpenVINO IR Frontend
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-ir-frontend', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - pugixml >=1.12.1 # starting from this version shared libraries are provided
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/libopenvino_ir_frontend${SHLIB_EXT}.{{ version_postfix }}  # [linux]
        - test -f $PREFIX/lib/libopenvino_ir_frontend.{{ version_postfix }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino_ir_frontend%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-onnx-frontend
    version: {{ version }}
    script: install/install_onnx.sh
    about:
      summary: OpenVINO ONNX Frontend
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-onnx-frontend', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/libopenvino_onnx_frontend${SHLIB_EXT}.{{ version_postfix }}  # [linux]
        - test -f $PREFIX/lib/libopenvino_onnx_frontend.{{ version_postfix }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino_onnx_frontend%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-paddle-frontend
    version: {{ version }}
    script: install/install_paddle.sh
    about:
      summary: OpenVINO Paddle Frontend
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-paddle-frontend', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/libopenvino_paddle_frontend${SHLIB_EXT}.{{ version_postfix }}  # [linux]
        - test -f $PREFIX/lib/libopenvino_paddle_frontend.{{ version_postfix }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino_paddle_frontend%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-pytorch-frontend
    version: {{ version }}
    script: install/install_pytorch.sh
    about:
      summary: OpenVINO Pytorch Frontend
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-pytorch-frontend', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/libopenvino_pytorch_frontend${SHLIB_EXT}.{{ version_postfix }}  # [linux]
        - test -f $PREFIX/lib/libopenvino_pytorch_frontend.{{ version_postfix }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino_pytorch_frontend%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-tensorflow-frontend
    version: {{ version }}
    script: install/install_tensorflow.sh
    about:
      summary: OpenVINO TensorFlow Frontend
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-tensorflow-frontend', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - snappy =1.1.10
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/libopenvino_tensorflow_frontend${SHLIB_EXT}.{{ version_postfix }}  # [linux]
        - test -f $PREFIX/lib/libopenvino_tensorflow_frontend.{{ version_postfix }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino_tensorflow_frontend%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-tensorflow-lite-frontend
    version: {{ version }}
    script: install/install_tensorflow_lite.sh
    about:
      summary: OpenVINO TensorFlow Lite Frontend
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-tensorflow-lite-frontend', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/libopenvino_tensorflow_lite_frontend${SHLIB_EXT}.{{ version_postfix }}  # [linux]
        - test -f $PREFIX/lib/libopenvino_tensorflow_lite_frontend.{{ version_postfix }}${SHLIB_EXT}  # [osx]
        - if not exist %LIBRARY_BIN%\\openvino_tensorflow_lite_frontend%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-intel-cpu-plugin
    version: {{ version }}
    script: install/install_cpu.sh
    about:
      summary: OpenVINO Intel® CPU plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      skip: True  # [not x86_64]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - pugixml >=1.12.1 # starting from this version shared libraries are provided
        - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version_postfix }}/libopenvino_intel_cpu_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version_postfix }}\\openvino_intel_cpu_plugin%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-arm-cpu-plugin
    version: {{ version }}
    script: install/install_cpu.sh
    about:
      summary: OpenVINO ARM® CPU plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      skip: True  # [not aarch64 and not arm64]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - pugixml >=1.12.1 # starting from this version shared libraries are provided
        - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version_postfix }}/libopenvino_arm_cpu_plugin.so

  - name: libopenvino-intel-gpu-plugin
    version: {{ version }}
    script: install/install_gpu.sh
    about:
      summary: OpenVINO Intel® GPU plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      skip: True  # [not linux64 and not win64]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
        - ocl-icd  # [linux64]
        - clhpp
        - khronos-opencl-icd-loader  # [win64]
        - pugixml >=1.12.1 # starting from this version shared libraries are provided
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - ocl-icd-system  # [linux64]
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version_postfix }}/libopenvino_intel_gpu_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version_postfix }}\\openvino_intel_gpu_plugin%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-auto-plugin
    version: {{ version }}
    script: install/install_auto.sh
    about:
      summary: OpenVINO Auto plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version_postfix }}/libopenvino_auto_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version_postfix }}\\openvino_auto_plugin%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-auto-batch-plugin
    version: {{ version }}
    script: install/install_batch.sh
    about:
      summary: OpenVINO Auto Batch plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version_postfix }}/libopenvino_auto_batch_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version_postfix }}\\openvino_auto_batch_plugin%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-hetero-plugin
    version: {{ version }}
    script: install/install_hetero.sh
    about:
      summary: OpenVINO Hetero plugin
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - pugixml >=1.12.1 # starting from this version shared libraries are provided
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
    test:
      commands:
        - test -f $PREFIX/lib/openvino-{{ version_postfix }}/libopenvino_hetero_plugin.so  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino-{{ version_postfix }}\\openvino_hetero_plugin%SHLIB_EXT% exit 1  # [win]

  - name: libopenvino-python
    script: install/install_python.sh
    about:
      summary: OpenVINO Python API
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
      entry_points:
        - ovc = openvino.tools.ovc.main:main
        - benchmark_app = openvino.tools.benchmark.main:main
      ignore_run_exports_from:
        - tbb-devel  # because required just for developer package
        - pugixml  # because required just for developer package
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - python                              # [build_platform != target_platform]
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - sysroot_linux-64 =2.17  # [linux64]
        - make  # [unix]
        - cython >=0.29
        - cmake >=3.15  # to have new cmake cmd interface (-S, --install and other options)
        - pybind11 >=2.10.1  # this versions works well for cross-compilation
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - {{ pin_subpackage('libopenvino-onnx-frontend', exact=True) }}
        - {{ pin_subpackage('libopenvino-paddle-frontend', exact=True) }}
        - {{ pin_subpackage('libopenvino-pytorch-frontend', exact=True) }}
        - {{ pin_subpackage('libopenvino-tensorflow-frontend', exact=True) }}
        - tbb-devel =2021.5  # for developer package only
        - pugixml >=1.12.1  # for developer package only
        - python
        - pip
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - {{ pin_subpackage('libopenvino-onnx-frontend', exact=True) }}
        - {{ pin_subpackage('libopenvino-paddle-frontend', exact=True) }}
        - {{ pin_subpackage('libopenvino-pytorch-frontend', exact=True) }}
        - {{ pin_subpackage('libopenvino-tensorflow-frontend', exact=True) }}
        - numpy >=1.16.6
        - singledispatchmethod  # [py <= 37]
        - python
    test:
      imports:
        - ngraph
        - ngraph.opset1
        - ngraph.opset2
        - ngraph.opset3
        - ngraph.opset4
        - ngraph.opset5
        - ngraph.opset6
        - ngraph.opset7
        - ngraph.opset8
        - ngraph.opset9
        - ngraph.opset10
        - ngraph.opset11
        - ngraph.utils
        - openvino.inference_engine
        - openvino.runtime
        - openvino.runtime.op
        - openvino.runtime.passes
        - openvino.runtime.properties
        - openvino.runtime.opset1
        - openvino.runtime.opset2
        - openvino.runtime.opset3
        - openvino.runtime.opset4
        - openvino.runtime.opset5
        - openvino.runtime.opset6
        - openvino.runtime.opset7
        - openvino.runtime.opset8
        - openvino.runtime.opset9
        - openvino.runtime.opset10
        - openvino.runtime.opset11
        - openvino.frontend
        - openvino.frontend.onnx
        - openvino.frontend.paddle
        - openvino.frontend.pytorch
        - openvino.frontend.tensorflow
        - openvino.preprocess
      commands:
        # - pip check # fails before of openvino-telemetry
        - ovc --help
        - benchmark_app --help
        - test $(pip list | grep openvino | wc -l) -eq 1  # [unix]
        - if [[ $($PYTHON -c 'import openvino.runtime as ov; print(ov.__version__[0:8])') != {{ version_postfix }} ]]; then exit 1; fi  # [unix]
      requires:
        - pip

  - name: openvino
    version: {{ version }}
    script: install/install_dev.sh
    about:
      summary: OpenVINO Runtime & Development files
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
      run_exports:
        - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-python', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-intel-cpu-plugin', max_pin='x.x.x') }}  # [x86_64]
        - {{ pin_subpackage('libopenvino-arm-cpu-plugin', max_pin='x.x.x') }}  # [aarch64 or arm64]
        - {{ pin_subpackage('libopenvino-intel-gpu-plugin', max_pin='x.x.x') }}  # [win64 or linux64]
        - {{ pin_subpackage('libopenvino-auto-plugin', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-hetero-plugin', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-auto-batch-plugin', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-ir-frontend', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-onnx-frontend', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-paddle-frontend', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-pytorch-frontend', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-tensorflow-frontend', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-tensorflow-lite-frontend', max_pin='x.x.x') }}
    requirements:
      build:
        - cmake >=3.15  # to have new cmake cmd interface (-S, --install and other options)
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-python', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-intel-cpu-plugin', max_pin='x.x.x') }}  # [x86_64]
        - {{ pin_subpackage('libopenvino-arm-cpu-plugin', max_pin='x.x.x') }}  # [aarch64 or arm64]
        - {{ pin_subpackage('libopenvino-intel-gpu-plugin', max_pin='x.x.x') }}  # [win64 or linux64]
        - {{ pin_subpackage('libopenvino-auto-plugin', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-hetero-plugin', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-auto-batch-plugin', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-ir-frontend', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-onnx-frontend', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-paddle-frontend', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-pytorch-frontend', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-tensorflow-frontend', max_pin='x.x.x') }}
        - {{ pin_subpackage('libopenvino-tensorflow-lite-frontend', max_pin='x.x.x') }}
    test:
      requires:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - ninja
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
        - pkg-config # to find zlib
        - zlib
        - nlohmann_json
        - sysroot_linux-64 =2.17  # [linux64]
        - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
        - opencv
        - gflags
      source_files:
        - samples
        - thirdparty/cnpy
      files:
        - snippets/
      commands:
        - export MACOSX_DEPLOYMENT_TARGET={{ MACOSX_DEPLOYMENT_TARGET }}  # [osx]
        - export CMAKE_GENERATOR=Ninja  # [unix]

        # check libraries (symlinks)
        {% set openvino_libs = [] %}
        {{ openvino_libs.append("") or "" }}
        {{ openvino_libs.append("_c") or "" }}
        {{ openvino_libs.append("_paddle_frontend") or "" }}
        {{ openvino_libs.append("_pytorch_frontend") or "" }}
        {{ openvino_libs.append("_onnx_frontend") or "" }}
        {{ openvino_libs.append("_tensorflow_frontend") or "" }}
        {{ openvino_libs.append("_tensorflow_lite_frontend") or "" }}
        {% for openvino_lib in openvino_libs %}
        - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}${SHLIB_EXT}  # [unix]
        - if not exist %LIBRARY_BIN%\\openvino{{ openvino_lib }}%SHLIB_EXT% exit 1  # [win]
        {% endfor %}

        # C++ samples on Unix
        - mkdir -p samples/cpp/thirdparty  # [unix]
        - cp -R thirdparty/cnpy samples/cpp/thirdparty/cnpy  # [unix]
        - cmake -S samples/cpp -B samples_cpp_build -DBIN_FOLDER=bin  # [unix]
        - cmake --build samples_cpp_build --config Release --verbose  # [unix]
        - ./samples_cpp_build/bin/hello_query_device  # [unix]

        # C samples on Unix
        - cp samples/cpp/CMakeLists.txt samples/c/CMakeLists.txt  # [unix]
        - cmake -S samples/c -B samples_c_build -DBIN_FOLDER=bin  # [unix]
        - cmake --build samples_c_build --config Release --verbose  # [unix]

        # C++ samples on Windows
        - mkdir -p samples\\cpp\\thirdparty  # [win]
        - cp -R thirdparty\\cnpy samples\\cpp\\thirdparty\\cnpy  # [win]
        - cmake -S samples\\cpp -B samples_cpp_build -DBIN_FOLDER=bin  # [win]
        - cmake --build samples_cpp_build --config Release --verbose  # [win]
        - .\\samples_cpp_build\\bin\\Release\\hello_query_device.exe  # [win]

        # C samples on Windows
        - cp samples\\cpp\\CMakeLists.txt samples\\c\\CMakeLists.txt  # [win]
        - cmake -S samples\\c -B samples_c_build -DBIN_FOLDER=bin  # [win]
        - cmake --build samples_c_build --config Release --verbose  # [win]

        # check that devices are found using OpenVINO C API
        - $CC snippets/openvino_available_devices.c $(pkg-config --cflags --libs pugixml tbb openvino) -Wl,-rpath,$PREFIX/lib -o openvino_devices_test  # [unix]
        - if [[ $(./openvino_devices_test) != "passed" ]]; then exit 1 ; fi  # [unix]

        # check that frontends are found using OpenVINO C++ API
        - cmake -S snippets -B snippets_build
        - cmake --build snippets_build --config Release --verbose
        - if [[ $(./snippets_build/openvino_frontends_test) != 6 ]]; then exit 1 ; fi  # [unix]


about:
  home: https://github.com/openvinotoolkit/openvino
  summary: 'Intel® Distribution of OpenVINO™ Toolkit'
  description: |
    Intel® Distribution of OpenVINO™ toolkit is an open-source toolkit for
    optimizing and deploying AI inference. It can be used to develop
    applications and solutions based on deep learning tasks, such as:
    emulation of human vision, automatic speech recognition, natural
    language processing, recommendation systems, etc. It provides
    high-performance and rich deployment options, from edge to cloud
  license: Apache-2.0
  license_family: Apache
  license_file:
    - LICENSE
    - third-party-programs.txt
    - onednn_third-party-programs.txt
    - runtime-third-party-programs.txt
  doc_url: https://docs.openvino.ai/latest/index.html
  dev_url: https://github.com/openvinotoolkit/openvino

extra:
  feedstock-name: openvino
  recipe-maintainers:
    - ilya-lavrenov
    - artanokhov
    - evgenytalanin-intel
    - RaguzovaTatyana
