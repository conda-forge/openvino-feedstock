{% set name = "openvino" %}
{% set version = "2023.1.0" %}

{% set PY_VER_MAJOR = PY_VER.split('.')[0] %}
{% set PY_VER_MINOR = PY_VER.split('.')[1] %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/openvinotoolkit/{{ name }}/archive/e5abe855b7567b08cadc916b58ad01024484f97f.tar.gz
    sha256: 16269611ddd420b451f2ef949e676e3eb2f73d1a0d7977fa1d5e8b3a720c33c5
    patches:
    # - patches/001-win64-find-ocl.patch  # [win64]
    # - patches/003-lin-arm64-compute-lib.patch  # [aarch64]
    # - patches/004-mha-build-fix.patch  # [arm64]
    - patches/005-setup-py.patch

build:
  number: 0
  run_exports:
    - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-python', max_pin='x.x.x') }}
  ignore_run_exports_from:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - tbb-devel # libopenvino and libopenvino-*-plugin already depend on tbb

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - git
    - ninja
    - ccache
    - pkg-config # to generate openvino.pc on macOS
    - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
    - sysroot_linux-64 =2.17  # [linux64]
  host:
    - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
    - pugixml >=1.12.1 # starting from this version shared libraries are provided
    - xbyak >=6.69.1  # [x86_64]
  run:
    - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-python', max_pin='x.x.x') }}

outputs:
  - name: libopenvino
    version: {{ version }}
    script: install/install.sh
    about:
      summary: OpenVINO Core Runtime library
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - pugixml >=1.12.1 # starting from this version shared libraries are provided
        - tbb-devel =2021.5  # starting from this version TBB uses hwloc in conda

  - name: libopenvino-python
    version: {{ version }}
    script: install/install_python.sh
    about:
      summary: OpenVINO Python API
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
    build:
      string: py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
      entry_points:
        - ovc = openvino.tools.ovc.main:main # do we need it? looks like setup.py does it
        # - benchmark_app = openvino.tools.benchmark.main:main
      run_exports:
        - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
      ignore_run_exports_from:
        - tbb-devel  # because required just for developer package
        - pugixml  # because required just for developer package
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - make  # [unix]
        - ccache  # TODO: remove
        - python                              # [build_platform != target_platform]
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - cython                              # [build_platform != target_platform]
        - cmake >=3.15 # to have new cmake cmd interface (-S, --install and other options)
      host:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - tbb-devel =2021.5  # for developer package
        - pugixml >=1.12.1 # for developer package
        - python
        - cython
        - pybind11
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - numpy >=1.16.6
        - python
        - singledispatchmethod
    test:
      imports:
        - openvino.runtime
        - openvino.runtime.op
        - openvino.runtime.passes
        - openvino.runtime.properties
        - openvino.runtime.opset1
        - openvino.runtime.opset2
        - openvino.runtime.opset3
        - openvino.runtime.opset4
        - openvino.runtime.opset5
        - openvino.runtime.opset6
        - openvino.runtime.opset7
        - openvino.runtime.opset8
        - openvino.runtime.opset9
        - openvino.runtime.opset10
        - openvino.runtime.opset11
        - openvino.frontend
        # - openvino.frontend.onnx
        # - openvino.frontend.paddle
        # - openvino.frontend.pytorch
        # - openvino.frontend.tensorflow
        - openvino.preprocess
      commands:
        # - pip check # fails before of openvino-telemetry
        - ocv --help
        - test $(pip list | grep openvino | wc -l) -eq 1  # [unix]
        - if [[ $($PYTHON -c 'import openvino.runtime as ov; print(ov.__version__[0:8])') != $PKG_VERSION ]]; then exit 1; fi  # [unix]
      requires:
        - pip

  - name: {{ name }}
    script: install/install_dev.sh

about:
  home: https://github.com/openvinotoolkit/openvino
  summary: 'Intel® Distribution of OpenVINO™ Toolkit'
  description: |
    Intel® Distribution of OpenVINO™ toolkit is an open-source toolkit for
    optimizing and deploying AI inference. It can be used to develop
    applications and solutions based on deep learning tasks, such as:
    emulation of human vision, automatic speech recognition, natural
    language processing, recommendation systems, etc. It provides
    high-performance and rich deployment options, from edge to cloud
  license: Apache-2.0
  license_family: Apache
  license_file:
    - LICENSE
    - third-party-programs.txt
    - onednn_third-party-programs.txt
    - runtime-third-party-programs.txt
  doc_url: https://docs.openvino.ai/latest/index.html
  dev_url: https://github.com/openvinotoolkit/openvino

extra:
  recipe-maintainers:
    - ilya-lavrenov
    - artanokhov
    - evgenytalanin-intel
    - RaguzovaTatyana
