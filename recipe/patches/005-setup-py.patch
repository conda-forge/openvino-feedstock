diff --git a/cmake/developer_package/packaging/common-libraries.cmake b/cmake/developer_package/packaging/common-libraries.cmake
index c8cde9746e..90b02b1d5e 100644
--- a/cmake/developer_package/packaging/common-libraries.cmake
+++ b/cmake/developer_package/packaging/common-libraries.cmake
@@ -37,7 +37,7 @@ macro(ov_common_libraries_cpack_set_dirs)
     ov_get_pyversion(pyversion)
     if(pyversion)
         # should not be used in production; only by setup.py install
-        set(OV_CPACK_PYTHONDIR ${CMAKE_INSTALL_LIBDIR}/${pyversion}/site-packages)
+        set(OV_CPACK_PYTHONDIR lib/${pyversion}/site-packages)
     endif()
 
     # non-native stuff
diff --git a/samples/cpp/CMakeLists.txt b/samples/cpp/CMakeLists.txt
index 8849aaf47d..68b80b2336 100644
--- a/samples/cpp/CMakeLists.txt
+++ b/samples/cpp/CMakeLists.txt
@@ -100,12 +100,7 @@ endif()
 if(TARGET gflags)
     set(GFLAGS_TARGET gflags)
 elseif(gflags_required)
-    if(EXISTS /etc/debian_version)
-        set(gflags_component nothreads_static)
-    else()
-        set(gflags_component shared)
-    endif()
-    find_package(gflags QUIET OPTIONAL_COMPONENTS ${gflags_component})
+    find_package(gflags QUIET)
     if(gflags_FOUND)
         if(TARGET ${GFLAGS_TARGET})
             # nothing
diff --git a/src/bindings/python/wheel/setup.py b/src/bindings/python/wheel/setup.py
index e8427dea31..b5b296d87e 100644
--- a/src/bindings/python/wheel/setup.py
+++ b/src/bindings/python/wheel/setup.py
@@ -52,6 +52,9 @@ TBB_LIBS_DIR = os.getenv("TBB_LIBS_DIR", f"runtime/3rdparty/tbb/{LIBS_DIR}")
 PUGIXML_LIBS_DIR = os.getenv("PUGIXML_LIBS_DIR", f"runtime/3rdparty/pugixml/{LIBS_DIR}")
 PY_PACKAGES_DIR = os.getenv("PY_PACKAGES_DIR", "python")
 LIBS_RPATH = "$ORIGIN" if sys.platform == "linux" else "@loader_path"
+PYTHON_EXTENSIONS_ONLY = os.getenv("PYTHON_EXTENSIONS_ONLY")
+SKIP_RPATH = os.getenv("SKIP_RPATH")
+CPACK_GENERATOR = os.getenv("CPACK_GENERATOR", "TGZ")
 
 LIB_INSTALL_CFG = {
     "ie_libs": {
@@ -175,30 +178,6 @@ PY_INSTALL_CFG = {
         "install_dir": PY_PACKAGES_DIR,
         "binary_dir": OPENVINO_PYTHON_BINARY_DIR,
     },
-    "benchmark_app": {
-        "entry_point": {
-            "console_scripts": [
-                "benchmark_app = openvino.tools.benchmark.main:main",
-            ],
-        },
-        "name": f"pyopenvino_{PYTHON_VERSION}",
-        "prefix": f"{BUILD_BASE}/site-packages",
-        "source_dir": f"{OPENVINO_SOURCE_DIR}/tools/benchmark_tool",
-        "install_dir": PY_PACKAGES_DIR,
-        "binary_dir": "benchmark_app",
-    },
-    # "model_optimizer": {                                  # noqa: E731
-    #     "entry_point": {                                  # noqa: E731
-    #         "console_scripts": [                          # noqa: E731
-    #             "mo = openvino.tools.mo.main:main",       # noqa: E731
-    #         ],                                            # noqa: E731
-    #     },                                                # noqa: E731
-    #     "name": f"pyopenvino_{PYTHON_VERSION}",           # noqa: E731
-    #     "prefix": f"{BUILD_BASE}/site-packages",          # noqa: E731
-    #     "source_dir": f"{OPENVINO_SOURCE_DIR}/tools/mo",  # noqa: E731
-    #     "install_dir": PY_PACKAGES_DIR,                   # noqa: E731
-    #     "binary_dir": "model_optimizer",                  # noqa: E731
-    # },                                                    # noqa: E731
 }
 
 
@@ -238,6 +217,9 @@ class CustomBuild(build):
             self.jobs = os.getenv("MAX_JOBS")
         self.jobs = multiprocessing.cpu_count() if self.jobs is None else int(self.jobs)
 
+        if PYTHON_EXTENSIONS_ONLY is not None:
+            self.python_extensions_only = True
+
         if self.cmake_args is None:
             self.cmake_args = ""
 
@@ -266,6 +248,8 @@ class CustomBuild(build):
                     binary_dir = os.path.join(self.build_temp, binary_dir)
                     self.announce(f"Configuring {comp} cmake project", level=3)
                     self.spawn(["cmake", f"-DOpenVINODeveloperPackage_DIR={OPENVINO_BINARY_DIR}",
+                                         f"-DPYTHON_EXECUTABLE={sys.executable}",
+                                         f"-DCPACK_GENERATOR={CPACK_GENERATOR}",
                                          "-DCMAKE_BUILD_TYPE=Release",
                                          "-DENABLE_WHEEL=OFF",
                                          self.cmake_args,
@@ -443,6 +427,13 @@ class CopyExt(build_ext):
         super().initialize_options()
         self.skip_rpath = False
 
+    def finalize_options(self):
+        """Set final values for all the options that this command supports."""
+        super().finalize_options()
+
+        if SKIP_RPATH is not None:
+            self.skip_rpath = True
+
     def run(self):
         if len(self.extensions) == 1:
             self.extensions = find_prebuilt_extensions(get_install_dirs_list(PY_INSTALL_CFG))
diff --git a/thirdparty/dependencies.cmake b/thirdparty/dependencies.cmake
index e815baa80c..55630df950 100644
--- a/thirdparty/dependencies.cmake
+++ b/thirdparty/dependencies.cmake
@@ -363,52 +363,8 @@ endif()
 #
 
 if(ENABLE_SAMPLES OR ENABLE_COMPILE_TOOL OR ENABLE_TESTS)
-    if(CMAKE_TOOLCHAIN_FILE MATCHES "vcpkg          " OR DEFINED VCPKG_VERBOSE OR
-       CMAKE_TOOLCHAIN_FILE MATCHES "conan_toolchain" OR DEFINED CONAN_EXPORTED)
-        # vcpkg contains only libs compiled with threads
-        # conan case
-        find_package(gflags QUIET)
-    elseif(APPLE OR WIN32)
-        # on Windows and macOS we don't use gflags, because will be dynamically linked
-    elseif(CMAKE_HOST_LINUX AND LINUX)
-        if(OV_OS_RHEL)
-            set(gflag_component nothreads_shared)
-        elseif(OV_OS_DEBIAN)
-            set(gflag_component nothreads_static)
-        endif()
-        find_package(gflags QUIET OPTIONAL_COMPONENTS ${gflag_component})
-    endif()
-
-    if(gflags_FOUND)
-        if(TARGET gflags)
-            # no extra steps
-        elseif(TARGET gflags_nothreads-static)
-            # Debian 9: gflag_component is ignored
-            set(gflags_target gflags_nothreads-static)
-        elseif(TARGET gflags_nothreads-shared)
-            # CentOS / RHEL / Fedora case
-            set(gflags_target gflags_nothreads-shared)
-        elseif(TARGET ${GFLAGS_TARGET})
-            set(gflags_target ${GFLAGS_TARGET})
-        else()
-            message(FATAL_ERROR "Internal error: failed to find imported target 'gflags' using '${gflag_component}' component")
-        endif()
-
-        if(gflags_target)
-            if(OV_PkgConfig_VISILITY)
-                # need to set GLOBAL visibility in order to create ALIAS for this target
-                set_target_properties(${gflags_target} PROPERTIES IMPORTED_GLOBAL ON)
-            endif()
-            add_library(gflags ALIAS ${gflags_target})
-        endif()
-
-        message(STATUS "gflags (${gflags_VERSION}) is found at ${gflags_DIR} using '${gflag_component}' component")
-    endif()
-
-    if(NOT TARGET gflags)
-        add_subdirectory(thirdparty/gflags EXCLUDE_FROM_ALL)
-        openvino_developer_export_targets(COMPONENT openvino_common TARGETS gflags)
-    endif()
+    add_subdirectory(thirdparty/gflags EXCLUDE_FROM_ALL)
+    openvino_developer_export_targets(COMPONENT openvino_common TARGETS gflags)
 endif()
 
 #
