diff --git a/cmake/developer_package/packaging/common-libraries.cmake b/cmake/developer_package/packaging/common-libraries.cmake
index 159dce21bb..1efab8576c 100644
--- a/cmake/developer_package/packaging/common-libraries.cmake
+++ b/cmake/developer_package/packaging/common-libraries.cmake
@@ -37,7 +37,7 @@ macro(ov_common_libraries_cpack_set_dirs)
     ov_get_pyversion(pyversion)
     if(pyversion)
         # should not be used in production; only by setup.py install
-        set(OV_CPACK_PYTHONDIR ${CMAKE_INSTALL_LIBDIR}/${pyversion}/site-packages)
+        set(OV_CPACK_PYTHONDIR lib/${pyversion}/site-packages)
     endif()
 
     # non-native stuff
diff --git a/src/bindings/python/CMakeLists.txt b/src/bindings/python/CMakeLists.txt
index 93fd65992e..3bf06a5a76 100644
--- a/src/bindings/python/CMakeLists.txt
+++ b/src/bindings/python/CMakeLists.txt
@@ -242,6 +242,8 @@ macro(ov_define_setup_py_packaging_vars)
         # build locations
         OPENVINO_BINARY_DIR=${OpenVINO_BINARY_DIR}
         OPENVINO_PYTHON_BINARY_DIR=${OpenVINOPython_BINARY_DIR}
+        # to create proper directories for BA, OVC tools
+        CPACK_GENERATOR=${CPACK_GENERATOR}
         # variables to reflect cpack locations
         OV_RUNTIME_LIBS_DIR=${OV_WHEEL_RUNTIMEDIR}
         TBB_LIBS_DIR=${TBB_LIBS_DIR}
@@ -316,14 +318,17 @@ if(ENABLE_PYTHON_PACKAGING)
         COMMAND ${CMAKE_COMMAND} -E remove_directory
             "${python_package_prefix}"
         COMMAND ${setup_py_env}
+                # variables to reflect options (extensions only or full wheel package)
+                PYTHON_EXTENSIONS_ONLY=ON
+                SKIP_RPATH=ON
             "${PYTHON_EXECUTABLE}" "${CMAKE_CURRENT_SOURCE_DIR}/wheel/setup.py"
                 --no-user-cfg
                 --quiet
                 build
-                    --python-extensions-only
+                    # --python-extensions-only
                     --executable "/usr/bin/python3"
                 build_ext
-                    --skip-rpath
+                    # --skip-rpath
                 install
                     --no-compile
                     --prefix "${python_package_prefix}"
diff --git a/src/bindings/python/wheel/setup.py b/src/bindings/python/wheel/setup.py
index 6feaa81519..1440bad222 100644
--- a/src/bindings/python/wheel/setup.py
+++ b/src/bindings/python/wheel/setup.py
@@ -52,6 +52,9 @@ TBB_LIBS_DIR = os.getenv("TBB_LIBS_DIR", f"runtime/3rdparty/tbb/{LIBS_DIR}")
 PUGIXML_LIBS_DIR = os.getenv("PUGIXML_LIBS_DIR", f"runtime/3rdparty/pugixml/{LIBS_DIR}")
 PY_PACKAGES_DIR = os.getenv("PY_PACKAGES_DIR", "python")
 LIBS_RPATH = "$ORIGIN" if sys.platform == "linux" else "@loader_path"
+PYTHON_EXTENSIONS_ONLY = os.getenv("PYTHON_EXTENSIONS_ONLY")
+SKIP_RPATH = os.getenv("SKIP_RPATH")
+CPACK_GENERATOR = os.getenv("CPACK_GENERATOR", "TGZ")
 
 LIB_INSTALL_CFG = {
     "ie_libs": {
@@ -238,6 +241,9 @@ class CustomBuild(build):
             self.jobs = os.getenv("MAX_JOBS")
         self.jobs = multiprocessing.cpu_count() if self.jobs is None else int(self.jobs)
 
+        if PYTHON_EXTENSIONS_ONLY is not None:
+            self.python_extensions_only = True
+
         if self.cmake_args is None:
             self.cmake_args = ""
 
@@ -267,6 +273,7 @@ class CustomBuild(build):
                     self.announce(f"Configuring {comp} cmake project", level=3)
                     self.spawn(["cmake", f"-DOpenVINODeveloperPackage_DIR={OPENVINO_BINARY_DIR}",
                                          f"-DPYTHON_EXECUTABLE={sys.executable}",
+                                         f"-DCPACK_GENERATOR={CPACK_GENERATOR}",
                                          "-DCMAKE_BUILD_TYPE=Release",
                                          "-DENABLE_WHEEL=OFF",
                                          self.cmake_args,
@@ -444,6 +451,13 @@ class CopyExt(build_ext):
         super().initialize_options()
         self.skip_rpath = False
 
+    def finalize_options(self):
+        """Set final values for all the options that this command supports."""
+        super().finalize_options()
+
+        if SKIP_RPATH is not None:
+            self.skip_rpath = True
+
     def run(self):
         if len(self.extensions) == 1:
             self.extensions = find_prebuilt_extensions(get_install_dirs_list(PY_INSTALL_CFG))
